{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","articles","currentArticle","url","title","body","username","showNewArticle","bind","handleTextFieldChange","len","Math","floor","random","e","this","length","index","getRandomIndex","setState","fetch","process","result","json","console","log","target","value","Fragment","AppBar","position","className","Toolbar","Typography","variant","Grid","container","item","xs","TextField","onChange","id","label","Button","color","onClick","Card","href","rel","substring","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5a392c6b.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport Card from '@material-ui/core/Card'\nimport Grid from '@material-ui/core/Grid'\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      articles: [],\n      currentArticle: {\n        url: '',\n        title: '',\n        body: 'ユーザ名を入力して表示ボタンを押してね😉',\n      },\n      username: '',\n    }\n    this.showNewArticle = this.showNewArticle.bind(this)\n    this.handleTextFieldChange = this.handleTextFieldChange.bind(this)\n  }\n\n  getRandomIndex(len) {\n    return Math.floor(Math.random() * Math.floor(len))\n  }\n\n  async showNewArticle(e) {\n    try {\n      if (this.state.username) {\n        const len = this.state.articles.length\n        if (len > 0) {\n          const index = this.getRandomIndex(len)\n          this.setState({ currentArticle: this.state.articles[index] })\n        } else {\n          const result = await fetch(\n            `${process.env.REACT_APP_SERVER_URL}/api/v1/article?username=${this.state.username}`\n          )\n          const json = await result.json()\n          console.log(json)\n          if (json.length > 0) {\n            this.setState({ articles: json })\n            const index = this.getRandomIndex(json.length)\n            this.setState({ currentArticle: this.state.articles[index] })\n          } else {\n            this.setState({\n              currentArticle: {\n                url: '',\n                title: '',\n                body: 'データが無いみたいです・・・😢',\n              },\n            })\n            this.setState({ articles: [] })\n          }\n        }\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  handleTextFieldChange(e) {\n    console.log(e)\n    this.setState({ username: e.target.value })\n    this.setState({\n      currentArticle: {\n        url: '',\n        title: '',\n        body: 'ユーザ名を入力して表示ボタンを押してね😉',\n      },\n    })\n    this.setState({ articles: [] })\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <AppBar position=\"static\" className=\"App-app-bar\">\n          <Toolbar>\n            <Typography variant=\"h6\">\n              Qiitaでストックした記事をランダムで出すアプリ\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Grid container className=\"App-container\">\n          <Grid item xs={9} className=\"App-grid-item\">\n            <TextField\n              value={this.state.username}\n              onChange={this.handleTextFieldChange}\n              id=\"standard-basic\"\n              label=\"ユーザ名\"\n              variant=\"outlined\"\n              className=\"App-text-field\"\n            />\n          </Grid>\n          <Grid item xs={3} className=\"App-grid-item\">\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={this.showNewArticle}\n              className=\"App-button\"\n            >\n              表示\n            </Button>\n          </Grid>\n          <Grid item xs={12} className=\"App-grid-item\">\n            <Card className=\"App-card\">\n              {this.state.currentArticle.url ? (\n                <React.Fragment>\n                  <span className=\"App-msg\">\n                    タイトルクリックで元記事にジャンプ🕴\n                  </span>\n                  <a\n                    href={this.state.currentArticle.url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"App-article-title-link\"\n                  >\n                    <h1 className=\"App-article-title\">\n                      {this.state.currentArticle.title}\n                    </h1>\n                  </a>\n                  <div>\n                    {this.state.currentArticle.body.substring(0, 500) + '...'}\n                  </div>\n                </React.Fragment>\n              ) : (\n                <div>{this.state.currentArticle.body}</div>\n              )}\n            </Card>\n          </Grid>\n        </Grid>\n      </React.Fragment>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}